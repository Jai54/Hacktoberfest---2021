//PROBLEM STATEMENT-

You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].


Example 1:

Input: nums = [5,2,6,1]
Output: [2,1,1,0]
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Example 2:

Input: nums = [-1]
Output: [0]
Example 3:

Input: nums = [-1,-1]
Output: [0,0]

//SOURCE CODE-

class BIT{
    vector<int> bit;
public:
    BIT(int n) : bit(n+1) { }
    void update(int i, int val) {
        for(;i <= size(bit); i += i & -i) bit[i] += val;
    }
    int query(int i) {  // returns number of elements in [0...i]
        int res = 0;
        for(;i > 0; i -= i & -i) res += bit[i];
        return res;
    }
};
class Solution {
public:
    vector<int> countSmaller(vector<int>& nums) {
        const int MAX = 1e4+1;   // max range
        for_each(begin(nums), end(nums), [](int& n){n += MAX;});    // converting range from [-10^4,10^4] to [0,2*10^4]
        BIT T(2*MAX);
        for(int i = size(nums)-1; ~i; i--) 
            T.update(nums[i], 1),
            nums[i] = T.query(nums[i] - 1);
        return nums;
    }
};
